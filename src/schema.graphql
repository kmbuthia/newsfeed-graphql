type Query {
  info: String!
  # feed(filter: String, skip: Int, take: Int, orderBy: LinkOrderByInput): Feed!
  feed(filter: FeedFilter, clauses: ClauseFilter): Feed!
  link(id: ID!): Link
}

type Mutation {
  postLink(url: String!, description: String!): Link!
  updateLink(id: ID!, url: String, description: String): Link
  deleteLink(id: ID!): Link
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  updateUser(id: ID!, name: String, email: String, password: String): User
  vote(linkId: ID!): Vote
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type AuthPayload {
  token: String
  user: User
}

type Feed {
  links: [Link!]!
  count: Int!
}

input FeedFilter {
  description: Filter
  url: Filter
  createdAt: Filter
}

input Filter {
  equals: String
  not: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

input ClauseFilter {
  orderBy: LinkOrderByInput
  take: Int
  skip: Int
  distinct: [String]
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}
